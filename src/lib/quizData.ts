export interface QuizQuestion {
  id: string
  question: string
  type: 'multiple-choice' | 'true-false' | 'image-choice' | 'sign-recognition' | 'fill-blank' | 'translation' | 'video-comparison'
  options?: string[]
  // In demo mode we also allow multiple correct answers
  correctAnswer: string | boolean | string[]
  explanation: string
  category: string
  difficulty: 'easy' | 'medium' | 'hard'
  imageUrl?: string
  signVideo?: string
  signVideo2?: string
  points?: number
}

export interface QuizCategory {
  id: string
  name: string
  description: string
  icon: string
  color: string
}

// Demo categories and questions (no backend required)
export const quizCategories: QuizCategory[] = [
  { id: 'greetings', name: 'Ch√†o h·ªèi', description: 'C√°c k√Ω hi·ªáu ch√†o h·ªèi c∆° b·∫£n', icon: 'üëã', color: '#3b82f6' },
  { id: 'family', name: 'Gia ƒë√¨nh', description: 'T·ª´ v·ª±ng v·ªÅ gia ƒë√¨nh', icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶', color: '#ef4444' },
  { id: 'numbers', name: 'S·ªë ƒë·∫øm', description: 'S·ªë ƒë·∫øm c∆° b·∫£n', icon: 'üî¢', color: '#10b981' },
]

export const quizQuestions: QuizQuestion[] = [
  {
    id: 'q1',
    question: 'K√Ω hi·ªáu n√†o th·ªÉ hi·ªán l·ªùi ch√†o c∆° b·∫£n?',
    type: 'multiple-choice',
    options: ['Xin ch√†o', 'C·∫£m ∆°n', 'Xin l·ªói'],
    correctAnswer: 'Xin ch√†o',
    explanation: 'ƒê·ªông t√°c v·∫´y tay th·ªÉ hi·ªán l·ªùi ch√†o c∆° b·∫£n.',
    category: 'greetings',
    difficulty: 'easy',
    signVideo: '/resources/videos/Ch√†o.mp4',
    points: 10,
  },
  {
    id: 'q2',
    question: 'K√Ω hi·ªáu n√†o mang nghƒ©a C·∫£m ∆°n?',
    type: 'multiple-choice',
    options: ['Xin ch√†o', 'C·∫£m ∆°n', 'Xin l·ªói'],
    correctAnswer: 'C·∫£m ∆°n',
    explanation: 'Ch·∫°m tay v√†o c·∫±m r·ªìi ƒë∆∞a ra ph√≠a tr∆∞·ªõc th·ªÉ hi·ªán l·ªùi c·∫£m ∆°n.',
    category: 'greetings',
    difficulty: 'easy',
    signVideo: '/resources/videos/Ch√†o.mp4',
    points: 10,
  },
  {
    id: 'q3',
    question: 'K√Ω hi·ªáu cho s·ªë 1 l√† l·ª±a ch·ªçn n√†o?',
    type: 'multiple-choice',
    options: ['1', '2', '3'],
    correctAnswer: '1',
    explanation: 'Gi∆° m·ªôt ng√≥n tay tr·ªè ƒë·ªÉ bi·ªÉu th·ªã s·ªë 1.',
    category: 'numbers',
    difficulty: 'easy',
    signVideo: '/resources/videos/1.mp4',
    points: 10,
  },
  {
    id: 'q4',
    question: 'K√Ω hi·ªáu n√†o ch·ªâ con ch√≥?',
    type: 'multiple-choice',
    options: ['Ch√≥', 'M√®o', 'G√†'],
    correctAnswer: 'Ch√≥',
    explanation: 'ƒê·ªông t√°c m√¥ t·∫£ ƒë·∫∑c tr∆∞ng c·ªßa ch√≥.',
    category: 'family',
    difficulty: 'medium',
    signVideo: '/resources/videos/con ch√≥ - nam.mp4',
    points: 10,
  },
  {
    id: 'q5',
    question: 'Ch·ªçn video kh·ªõp v·ªõi k√Ω hi·ªáu ch√†o h·ªèi',
    type: 'video-comparison',
    options: ['A', 'B'],
    correctAnswer: 'A',
    explanation: 'Video A hi·ªÉn th·ªã ƒë·ªông t√°c v·∫´y tay ch√†o h·ªèi.',
    category: 'greetings',
    difficulty: 'medium',
    signVideo: '/resources/videos/Ch√†o.mp4',
    signVideo2: '/resources/videos/1.mp4',
    points: 10,
  },
]

// Demo fetchers returning local data
export async function fetchQuizCategories(): Promise<QuizCategory[]> {
  return quizCategories
}

export async function fetchQuizQuestions(category?: string, count: number = 5): Promise<QuizQuestion[]> {
  const filtered = category ? quizQuestions.filter(q => q.category === category) : quizQuestions
  const selected = [...filtered].sort(() => Math.random() - 0.5).slice(0, Math.min(count, filtered.length))
  return selected
}

// Legacy function for backward compatibility - now uses demo data
export async function getRandomQuestions(category?: string, count: number = 5): Promise<QuizQuestion[]> {
  return await fetchQuizQuestions(category, count)
}
