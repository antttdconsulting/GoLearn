"use client"

import { useState } from "react";
import { Button } from "../../shared/ui/button";
import { Card, CardContent, CardDescription, CardHeader } from "../../shared/ui/card";
import { Badge } from "../../shared/ui/badge";
import { Progress } from "../../shared/ui/progress";
import { ChevronRight, Check, Globe, Target, Users, BookOpen } from "lucide-react";

const Onboarding = () => {
  const [step, setStep] = useState(1);
  const [selectedLanguage, setSelectedLanguage] = useState("");
  const [selectedLevel, setSelectedLevel] = useState("");
  const [selectedGoal, setSelectedGoal] = useState("");

  const languages = [
    {
      id: "vsl",
      name: "Ng√¥n ng·ªØ k√Ω hi·ªáu Vi·ªát Nam",
      description: "Ng√¥n ng·ªØ k√Ω hi·ªáu ch√≠nh th·ª©c t·∫°i Vi·ªát Nam",
      flag: "üáªüá≥"
    },
    {
      id: "asl",
      name: "American Sign Language",
      description: "Ng√¥n ng·ªØ k√Ω hi·ªáu M·ªπ",
      flag: "üá∫üá∏"
    }
  ];

  const levels = [
    { id: "beginner", name: "M·ªõi b·∫Øt ƒë·∫ßu", description: "Ch∆∞a bi·∫øt g√¨ v·ªÅ ng√¥n ng·ªØ k√Ω hi·ªáu" },
    { id: "intermediate", name: "Trung b√¨nh", description: "Bi·∫øt m·ªôt s·ªë t·ª´ c∆° b·∫£n" },
    { id: "advanced", name: "N√¢ng cao", description: "C√≥ th·ªÉ giao ti·∫øp c∆° b·∫£n" }
  ];

  const goals = [
    { id: "communication", name: "Giao ti·∫øp", description: "ƒê·ªÉ giao ti·∫øp v·ªõi ng∆∞·ªùi khi·∫øm th√≠nh" },
    { id: "career", name: "Ngh·ªÅ nghi·ªáp", description: "ƒê·ªÉ ph√°t tri·ªÉn s·ª± nghi·ªáp" },
    { id: "family", name: "Gia ƒë√¨nh", description: "ƒê·ªÉ giao ti·∫øp v·ªõi th√†nh vi√™n gia ƒë√¨nh" },
    { id: "interest", name: "S·ªü th√≠ch", description: "H·ªçc v√¨ y√™u th√≠ch" }
  ];

  const handleNext = () => {
    if (step < 4) {
      setStep(step + 1);
    }
  };

  const handleBack = () => {
    if (step > 1) {
      setStep(step - 1);
    }
  };

  const renderStep = () => {
    switch (step) {
      case 1:
        return (
          <div className="space-y-6">
            <div className="text-center">
              <Globe className="w-16 h-16 text-primary mx-auto mb-4" />
              <h2 className="text-2xl font-bold mb-2">Ch·ªçn ng√¥n ng·ªØ k√Ω hi·ªáu</h2>
              <p className="text-muted-foreground">B·∫°n mu·ªën h·ªçc ng√¥n ng·ªØ k√Ω hi·ªáu n√†o?</p>
            </div>
            <div className="grid gap-4">
              {languages.map((lang) => (
                <button
                  key={lang.id}
                  onClick={() => setSelectedLanguage(lang.id)}
                  className={`p-4 border rounded-lg text-left transition-colors ${
                    selectedLanguage === lang.id
                      ? "border-primary bg-primary/10"
                      : "border-border hover:bg-muted"
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">{lang.flag}</span>
                    <div>
                      <h3 className="font-semibold">{lang.name}</h3>
                      <p className="text-sm text-muted-foreground">{lang.description}</p>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="text-center">
              <Target className="w-16 h-16 text-primary mx-auto mb-4" />
              <h2 className="text-2xl font-bold mb-2">Tr√¨nh ƒë·ªô hi·ªán t·∫°i</h2>
              <p className="text-muted-foreground">B·∫°n ƒë√£ bi·∫øt g√¨ v·ªÅ ng√¥n ng·ªØ k√Ω hi·ªáu?</p>
            </div>
            <div className="grid gap-4">
              {levels.map((level) => (
                <button
                  key={level.id}
                  onClick={() => setSelectedLevel(level.id)}
                  className={`p-4 border rounded-lg text-left transition-colors ${
                    selectedLevel === level.id
                      ? "border-primary bg-primary/10"
                      : "border-border hover:bg-muted"
                  }`}
                >
                  <div>
                    <h3 className="font-semibold">{level.name}</h3>
                    <p className="text-sm text-muted-foreground">{level.description}</p>
                  </div>
                </button>
              ))}
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <div className="text-center">
              <Users className="w-16 h-16 text-primary mx-auto mb-4" />
              <h2 className="text-2xl font-bold mb-2">M·ª•c ti√™u h·ªçc t·∫≠p</h2>
              <p className="text-muted-foreground">T·∫°i sao b·∫°n mu·ªën h·ªçc ng√¥n ng·ªØ k√Ω hi·ªáu?</p>
            </div>
            <div className="grid gap-4">
              {goals.map((goal) => (
                <button
                  key={goal.id}
                  onClick={() => setSelectedGoal(goal.id)}
                  className={`p-4 border rounded-lg text-left transition-colors ${
                    selectedGoal === goal.id
                      ? "border-primary bg-primary/10"
                      : "border-border hover:bg-muted"
                  }`}
                >
                  <div>
                    <h3 className="font-semibold">{goal.name}</h3>
                    <p className="text-sm text-muted-foreground">{goal.description}</p>
                  </div>
                </button>
              ))}
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <div className="text-center">
              <BookOpen className="w-16 h-16 text-primary mx-auto mb-4" />
              <h2 className="text-2xl font-bold mb-2">S·∫µn s√†ng b·∫Øt ƒë·∫ßu!</h2>
              <p className="text-muted-foreground">Ch√∫ng t√¥i ƒë√£ chu·∫©n b·ªã m·ªôt l·ªô tr√¨nh h·ªçc t·∫≠p ph√π h·ª£p v·ªõi b·∫°n</p>
            </div>
            <div className="bg-muted/50 rounded-lg p-6 space-y-4">
              <div className="flex items-center space-x-3">
                <Badge variant="secondary">{selectedLanguage === "vsl" ? "üáªüá≥ VSL" : "üá∫üá∏ ASL"}</Badge>
                <span className="text-sm">Ng√¥n ng·ªØ ƒë√£ ch·ªçn</span>
              </div>
              <div className="flex items-center space-x-3">
                <Badge variant="secondary">{selectedLevel}</Badge>
                <span className="text-sm">Tr√¨nh ƒë·ªô hi·ªán t·∫°i</span>
              </div>
              <div className="flex items-center space-x-3">
                <Badge variant="secondary">{selectedGoal}</Badge>
                <span className="text-sm">M·ª•c ti√™u h·ªçc t·∫≠p</span>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  const isStepComplete = () => {
    switch (step) {
      case 1:
        return selectedLanguage !== "";
      case 2:
        return selectedLevel !== "";
      case 3:
        return selectedGoal !== "";
      case 4:
        return true;
      default:
        return false;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-card to-muted flex items-center justify-center p-4">
      <Card className="w-full max-w-md mx-auto bg-card/80 backdrop-blur-sm border-border/50 shadow-xl">
        <CardHeader className="text-center">
          <div className="flex items-center justify-center space-x-2 mb-4">
            <div className="w-8 h-8 bg-primary rounded-lg flex items-center justify-center">
              <Globe className="w-5 h-5 text-primary-foreground" />
            </div>
            <h1 className="text-2xl font-bold">GoLearn</h1>
          </div>
                <CardDescription>
            B∆∞·ªõc {step} / 4
                </CardDescription>
          <Progress value={(step / 4) * 100} className="h-2" />
              </CardHeader>
        
        <CardContent className="p-8">
          {renderStep()}
          
          <div className="flex items-center justify-between mt-8">
            <Button
              variant="outline"
              onClick={handleBack}
              disabled={step === 1}
            >
              Quay l·∫°i
            </Button>
            
            {step < 4 ? (
            <Button
              onClick={handleNext}
                disabled={!isStepComplete()}
              >
                Ti·∫øp theo
                <ChevronRight className="w-4 h-4 ml-2" />
              </Button>
            ) : (
              <Button className="bg-green-600 hover:bg-green-700">
                <Check className="w-4 h-4 mr-2" />
                B·∫Øt ƒë·∫ßu h·ªçc
            </Button>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Onboarding;
